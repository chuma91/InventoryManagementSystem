//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventoryManagementSystem.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class InventoryManagementDatabaseEntities : DbContext
    {
        public InventoryManagementDatabaseEntities()
            : base("name=InventoryManagementDatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Category> Categories { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<Payment_Status> Payment_Status { get; set; }
        public DbSet<Product_Status> Product_Status { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<User> Users { get; set; }
    
        public virtual int GetAllCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllCategories");
        }
    
        public virtual ObjectResult<GetAllCustomers_Result> GetAllCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCustomers_Result>("GetAllCustomers");
        }
    
        public virtual ObjectResult<GetAllOrders_Result> GetAllOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOrders_Result>("GetAllOrders");
        }
    
        public virtual ObjectResult<GetAllProducts_Result> GetAllProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProducts_Result>("GetAllProducts");
        }
    
        public virtual ObjectResult<GetAllSuppliers_Result> GetAllSuppliers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSuppliers_Result>("GetAllSuppliers");
        }
    
        public virtual int RegisterNewUser(string firstName, string lastName, string emailAddress, string phoneNumber, string passwordHash, Nullable<int> roleId, string territoryId, Nullable<bool> rememberMe, Nullable<System.DateTime> dateCreated, Nullable<bool> isDeleted)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var territoryIdParameter = territoryId != null ?
                new ObjectParameter("TerritoryId", territoryId) :
                new ObjectParameter("TerritoryId", typeof(string));
    
            var rememberMeParameter = rememberMe.HasValue ?
                new ObjectParameter("RememberMe", rememberMe) :
                new ObjectParameter("RememberMe", typeof(bool));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterNewUser", firstNameParameter, lastNameParameter, emailAddressParameter, phoneNumberParameter, passwordHashParameter, roleIdParameter, territoryIdParameter, rememberMeParameter, dateCreatedParameter, isDeletedParameter);
        }
    
        public virtual ObjectResult<Supplier> GetAllSuppliersFromDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Supplier>("GetAllSuppliersFromDatabase");
        }
    
        public virtual ObjectResult<Supplier> GetAllSuppliersFromDatabase(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Supplier>("GetAllSuppliersFromDatabase", mergeOption);
        }
    
        public virtual ObjectResult<Product> GetAllProductsFromDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("GetAllProductsFromDatabase");
        }
    
        public virtual ObjectResult<Product> GetAllProductsFromDatabase(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("GetAllProductsFromDatabase", mergeOption);
        }
    
        public virtual ObjectResult<Customer> GetAllCustomersFromDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("GetAllCustomersFromDatabase");
        }
    
        public virtual ObjectResult<Customer> GetAllCustomersFromDatabase(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("GetAllCustomersFromDatabase", mergeOption);
        }
    }
}
